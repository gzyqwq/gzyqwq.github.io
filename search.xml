<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[AT1983 BBQ Hard]]></title>
    <url>%2F2019%2F03%2F16%2FAT1983-BBQ-Hard%2F</url>
    <content type="text"><![CDATA[好题，考虑其组合意义。$dbinom{a_i+a_j+b_i+b_j}{a_i+a_j}$的组合意义是从$(0,0)$点到$(a_i+a_j,b_i+b_j)$的方案数这样还是没有用考虑移动坐标系，看成$（-a_i,-b_i）$到$(a_j,b_j)$的方案数这就可以DP了$f[i][j]$表示到$(i,j)$点的方案数$$f[i][j] = f[i - 1][j] + f[i][j - 1]$$123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354const int maxN = 200000 + 7;const int inv2 = 500000004;int f[4007][4007] , fac[maxN], a[maxN],b[maxN], inv[maxN];const int mod = 1e9 + 7;int fast_pow(int a,int b)&#123; int ans = 1; for(;b;b &gt;&gt;= 1,a = a * a%mod) if(b &amp; 1) ans = ans * a % mod; return ans;&#125;void Pre() &#123; fac[0] = 1; for(int i = 1;i &lt;= 8000;++ i) fac[i] = 1ll * fac[i - 1] * i % mod; inv[8000] = fast_pow(fac[8000],mod - 2); for(int i = 7999;i &gt;= 0;i --) inv[i] = 1ll * inv[i + 1] * (i + 1) % mod; int n = gi(); for(int i = 1;i &lt;= n;++ i) a[i] = gi() , b[i] = gi(); for(int i = 1;i &lt;= n;++ i) f[base - a[i]][base - b[i]] ++; for(int i = 1;i &lt;= 4000 + 4;++ i) &#123; for(int j = 1;j &lt;= 4000 + 4;++ j) &#123; f[i][j] += f[i - 1][j] + f[i][j - 1]; f[i][j] %= mod; &#125; &#125; return ;&#125;const int base = 2001;int C(int n , int m) &#123; return fac[n] * inv[m] % mod * inv[n - m] % mod;&#125;signed main() &#123; Pre(); int Ans = 0; for(int i = 1;i &lt;= n;++ i) &#123; Ans += f[a[i] + base][b[i] + base] ; Ans %= mod; Ans -= C(2 * a[i] + 2 * b[i] , 2 * a[i]); Ans %= mod; &#125; Ans += mod; Ans %= mod; Ans = Ans * inv2 % mod; std::cout &lt;&lt; Ans; return 0;&#125; 后面那俩瘠薄玩意好烦啊，偏偏在自习课的时候讨论自己出的题，傻逼吧，凡是让老子不爽的东西，都喷]]></content>
      <tags>
        <tag>组合</tag>
        <tag>题库 - AtCoder</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[逆元]]></title>
    <url>%2F2019%2F03%2F16%2F%E9%80%86%E5%85%83%2F</url>
    <content type="text"><![CDATA[逆元都快省选了，连逆元都不知道这里我们用$x’$表示x的逆元。emm，先写一点逆元吧。$$\frac{b}{a}\equiv r(\mod p)$$对于这个式子给定a，b，p。求r，其中$a|b$。我们找到一个a’使得$a’ * a\equiv1(\mod p)$就有$$b*a’ \equiv r * a * a’$$$$b*a’ \equiv r(\mod p)$$考虑如何找到a’扩欧：$a*a’\equiv 1(\mod p)$$a*a’+k*p=1$欧拉定理（这里是数论的欧拉定理）$a*a^{\phi (p-1)} \equiv 1(mod p)$更一般的形式 - 费马小定理（p是质数）：$a*a^{p-2}\equiv1(\mod p)$根据扩欧我们知道如果$(a,p)\ne 1$就无解。 可以线性求逆元：首先有$inv[1] = 1$对于每一个i，模数$p=k*i+r(r &lt; i)$$k*i+r\equiv 0(\mod p)$两边乘$i’r’$$k*r’+i’\equiv 0(\mod p)$$i’\equiv -k*r’(\mod p)$$i’\equiv p*r’-k*r’(\mod p)$$i’\equiv (p-k)*r’(\mod p)$12inv[1] = 1;for(int i = 2;i &lt;= n;++ i) inv[i] = (p - p / i) * inv[p % i] % p; 求阶乘逆元，不知道其他人怎么推的式子$(n-1)!*(n-1)!’ \equiv 1(\mod p)$$n!*n!’ \equiv 1(\mod p)$$(n-1)!*(n-1)!’ \equiv n!*n!’(\mod p)$$(n-1)!’ \equiv n*n!’(\mod p)$先处理$n!$逆元然后递推123456fac[0] = 1;for(int i = 1;i &lt;= n;++ i) fac[i] = 1ll * fac[i - 1] * i % mod;inv[n] = fast_pow(fac[n],mod - 2);for(int i = n - 1;i &gt;= 0;i --) inv[i] = 1ll * inv[i + 1] * (i + 1) % mod; 之后，貌似没了。]]></content>
      <tags>
        <tag>知识总结</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[My head file]]></title>
    <url>%2F2019%2F03%2F10%2FMy-head-file%2F</url>
    <content type="text"><![CDATA[一般给出的代码都是缺少头文件的，不然代码太长了.123456789101112131415161718192021222324/*header*/#include &lt;iostream&gt;#include &lt;cstdio&gt;#include &lt;cstring&gt;#include &lt;algorithm&gt;#include &lt;vector&gt;#include &lt;cmath&gt;#include &lt;map&gt;#include &lt;queue&gt;#define gc getchar()#define pc putchar#define ll long long#define mk make_pair#define fi first#define se secondusing std::min;using std::max;using std::swap;inline int gi() &#123; int x = 0,f = 1;char c = gc; while(c &lt; '0' || c &gt; '9') &#123;if(c == '-')f = -1;c = gc;&#125; while(c &gt;= '0' &amp;&amp; c &lt;= '9') &#123;x = x * 10 + c - '0';c = gc;&#125;return x * f;&#125;]]></content>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[PE 475 Music festival]]></title>
    <url>%2F2019%2F03%2F10%2FPE-475-Music-festival%2F</url>
    <content type="text"><![CDATA[设状态$f[i][j][k]$表示 有i个三元组缺3人 有j个三元组缺2人 有k个三元组缺1人 的方案数 然后枚举每一个四元组.枚举把他们放进哪一个三元组中. a表示四元组有a个人放进缺3人的个数. b表示四元组有b个人放进缺2人三元组个数. c表示四元组有c个人放进缺1人三元组的个数. 答案要求具有无序性. 考虑上面的DP式子就每一个三元组来言是有序性下的三元组的方案数. 还需要除以一个4n!的逆元. 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748const int maxN = 200 + 5;const int mod = 1000000007;int cb[1007][1007];int f[maxN][maxN][maxN];int fac[maxN];void Pre(int N) &#123; for (int i = 0; i &lt; N; ++i) for (int j = 0; j &lt;= i; ++j) cb[i][j] = j ? (cb[i - 1][j - 1] + cb[i - 1][j]) % mod : 1; fac[0] = 1; for (int i = 1; i &lt; N; ++i) fac[i] = fac[i - 1] * i % mod; return;&#125;void Solve(int n) &#123; f[n / 3][0][0] = 1; for(int i = n / 3;i &gt;= 0;-- i) &#123; for(int j = n / 3;j &gt;= 0;-- j) &#123; for(int k = n / 3;k &gt;= 0;-- k) &#123; if(f[i][j][k]) &#123; for(int a = 0;a &lt;= 4;++ a) &#123; for(int b = 0;a + b &lt;= 4;++ b) &#123; int c = 4 - a - b; if(c &gt; k) continue; int x = cb[j][b] % mod * cb[k][c] % mod * fac[b] % mod * fac[c] % mod * cb[4][a] % mod * cb[4 - a][b] % mod; f[i - a][j - b + a][k - c + b] += f[i][j][k] * x % mod; f[i - a][j - b + a][k - c + b] %= mod; &#125; &#125; &#125; &#125; &#125; &#125; printf("%d",f[0][0][0]);&#125;signed main() &#123; int n = 600; Pre(n); Solve(n); return 0;&#125; /*ans:75780067*/]]></content>
      <tags>
        <tag>组合</tag>
        <tag>动态规划</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[codeforces / project Euler 泛做]]></title>
    <url>%2F2019%2F03%2F10%2Fcodeforces-project-Euler-%E6%B3%9B%E5%81%9A%2F</url>
    <content type="text"><![CDATA[[TOC] 发现这个题库，很有意思，趁着还没有学习微积分，看不了书，赶快从头开始刷，所以都是一些简单的题目，即时简单，有一些结论还是很有意思的。 网上资料很少，有的找不到答案，所以只有硬着头皮做了。 PE 15一个网格图,只能向下，或者向右走,问从$(0,0)$到$(n,m)$到路径有多少条. 这里的结论是有$C_{n+m}^n$. 证明：从0,0到n,m会往下走n步,往右走m步，把路径看成一个长度为n+m的序列，往下走为0,往右走为1 有n个0,m个1,转化为有多少个不同的序列。 我们考虑从序列中选择0的方案数.就是$C_{n+m}^n$. PE 76这是一道很有意思的Partition Function P题目。 里面详细的讲解了如何使用数学的方法来解，不过全是英文，我没有看懂。 也可以使用$f[i][j]$表示以i结尾最后一段的和式j数的方案数. 然后发现可以使用前缀和优化，复杂度$O(n^2)$ 由于是DP,所以放一下代码仅供参考. 12345678910111213141516int main() &#123; f[0][0] = sum[0][0] = 1; for(int i = 1;i &lt;= 100;++ i) sum[0][i] = sum[0][i - 1]; int n = 100; for(int i = 1;i &lt;= n;++ i) &#123; for(int j = 1;j &lt;= i;++ j) &#123; f[i][j] = sum[i - j][j]; sum[i][j] = f[i][j]; &#125; for(int j = 2;j &lt;= 100;++ j) sum[i][j] += sum[i][j - 1]; &#125; ll Ans = 0; Ans = sum[100][99]; std::cout &lt;&lt; Ans; return 0;&#125; 从上面的链接中得知,有生成函数的解法。 PE 90一个trick , 显然可以用对数函数来比较大小 $log(a^b) = b*log(a)$ PE 577恩，调这道题做了一下午。 $f(i)$表示以i行为底的六边形造成的共线，然后就可以计算了 $$f(n) = f(n-1) + \sum_{s=1}^{\lfloor n/3\rfloor}s(n-3s+1)$$ PE 97一个trick ， mod， 乘法和加法满足 $(a*b)\%mod = ((a\% mod) * (b\% mod) )\%mod$ $(a+b)\%mod = ((a\% mod) + (b\% mod) )\%mod$ 待做PE 601 PE 613 PE 655 PE 493 PE 102 PE 618]]></content>
      <tags>
        <tag>题库-PE</tag>
        <tag>杂题</tag>
        <tag>题解</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[PE 577 Counting hexagons]]></title>
    <url>%2F2019%2F03%2F10%2FPE-577-Counting-hexagons%2F</url>
    <content type="text"><![CDATA[PE 577 Counting hexagons扣细节扣了30min，仔细观察了一会发现一个比较容易递推的式子 $f(i)$表示i行造成的六边形的数量。 就有递推式$$f(n) = f(n-1) + \sum_{s=1}^{\lfloor n/3\rfloor}s(n-3s+1)$$ 考虑这样一张图 我们考虑新增加一行会贡献多少，显然只会增加以该行为底边的六边形，然后枚举一个长度，考虑该长度下会贡献多少。 我们先来看一下小的情况,即长度为2的情况 我们会发现有一个性质：当位于中间的S边可以出现的话，那么一定可以形成三角形。 我们会发现,只有两边中间这一部分才能形成六边形，两边是不能形成的。 就是$n - 3 * i + 1$，需要注意的是对于在这个底边的每一个点都会造成$1$的贡献.所以要乘上$i$（猜的题意，被题意卡了好久，mmp） 1234567891011121314151617181920const int maxN = 10000000 + 7;long long f[maxN];int main() &#123; int n = 12345; f[3] = 1; for(int i = 4;i &lt;= n;++ i) &#123; f[i] = f[i - 1]; int tmp = i / 3; for(int j = 1;j &lt;= tmp;++ j) &#123; f[i] += (i - 3 * j + 1) * j; &#125; &#125; long long Sum = 0; for(int i = 1;i &lt;= n;++ i) Sum += f[i]; std::cout &lt;&lt; Sum; return 0;&#125;/*ans：265695031399260211*/]]></content>
      <tags>
        <tag>题库-PE</tag>
        <tag>题解</tag>
        <tag>组合</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[A big dream in the cruel world]]></title>
    <url>%2F2019%2F03%2F10%2FA-big-dream-in-the-cruel-world%2F</url>
    <content type="text"><![CDATA[终于把这个东西搞好了，呼 我是Jih_Knight 熟悉我的人应该知道以前的id是sdgzy. 哈哈，我是要成为计数大王的男人.]]></content>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
</search>
